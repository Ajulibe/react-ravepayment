{"version":3,"sources":["webpack:///../docs/usage/hooks.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,oTACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,0iBAwBL,iBAAQ,CACN,GAAM,0CADR,oBAEwB,0BAAYA,WAAW,MAAvB,WAFxB,QAEqF,0BAAYA,WAAW,MAAvB,cACrF,4BAAW,0BAAYA,WAAW,KAAvB,qBAAX,2CAAoH,0BAAYA,WAAW,KAAvB,aAApH,QAAkL,0BAAYA,WAAW,KAAvB,YAClL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ilBAgCL,iBAAQ,CACN,GAAM,QADR,QAGA,2CAA0B,0BAAYA,WAAW,KAAvB,qBAA1B,mDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4DAIL,kJAAiI,0BAAYA,WAAW,KAAvB,SAAjI,SAA4L,0BAAYA,WAAW,KAAvB,WAA5L,yE,6LAKJJ,EAAWK,gBAAiB","file":"component---docs-usage-hooks-mdx-45886d76efe54c7b268e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/iamraphson/working-place/open-sources/rave-libs/react-ravepayment/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h2>\n    <p>{`You can use the hooks librayr if your project support react v16.8 and above. The hooks API makes it easy to use the rave paymet API and it helps eradicate lots of boilerplate code. The hooks can only be used in a functional componet, which means you cannot use it in class component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {useRavePayment} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n};\n\nconst App = () => {\n  const {initializePayment} = useRavePayment(config); // check the props table for all allowed props of the config\n  return (\n    <div>\n      <button onClick={() => initializePayment()}>Pay 2000</button>\n    </div>\n  );\n};\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"providing-custom-onclose-and-onsuccess\"\n    }}>{`Providing custom `}<inlineCode parentName=\"h2\">{`onClose`}</inlineCode>{` and `}<inlineCode parentName=\"h2\">{`onSuccess`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`initializePayment`}</inlineCode>{` payment function accepts two parameter `}<inlineCode parentName=\"p\">{`onSuccess`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onClose`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {useRavePayment} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n};\n\nconst App = () => {\n  const {initializePayment} = useRavePayment(config);\n\n  function onClose() {\n    ...\n  }\n\n  function onSuccess() {\n    ...\n  }\n  return (\n    <div>\n      <button onClick={() => initializePayment(onSuccess, onClose)}>Pay 2000</button>\n    </div>\n  );\n};\n\nexport default App;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"note\"\n    }}>{`NOTE`}</h3>\n    <p>{`You cannot use the `}<inlineCode parentName=\"p\">{`initializePayment`}</inlineCode>{` payment function in a your handler as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<button onClick={initializePayment}>Pay 2000</button>\n`}</code></pre>\n    <p>{`the function requires two parameters which are optinal however using it like above would be passing the default parameter `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` handler on a component and that would cause an unitented behaviour.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}