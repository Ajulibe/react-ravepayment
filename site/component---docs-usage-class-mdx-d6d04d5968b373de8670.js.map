{"version":3,"sources":["webpack:///../docs/usage/class.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,yFAAwE,0BAAYC,WAAW,KAAvB,gBAAxE,2BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,opBA8BL,iBAAQ,CACN,GAAM,iCADR,iCAGA,gGAA+E,0BAAYA,WAAW,KAAvB,aAA/E,aAAkJ,0BAAYA,WAAW,KAAvB,SAAlJ,UACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wnBA6BL,iBAAQ,CACN,GAAM,0BADR,0BAGA,4FAA2E,0BAAYA,WAAW,KAAvB,gBAA3E,IAAwI,0BAAYA,WAAW,KAAvB,qBAAxI,wDAA8P,0BAAYA,WAAW,KAAvB,gBAA9P,oDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8rB,6LAsCTJ,EAAWK,gBAAiB","file":"component---docs-usage-class-mdx-d6d04d5968b373de8670.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/iamraphson/working-place/open-sources/rave-libs/react-ravepayment/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"class-component\"\n    }}>{`Class component`}</h2>\n    <p>{`If you are using the traditional class component you can use the `}<inlineCode parentName=\"p\">{`rave-payment`}</inlineCode>{` in the following ways:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, {Component} from 'react';\nimport {RaveProvider, RavePaymentButton} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n  onSuccess: () => {},\n  onClose: () => {},\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <RaveProvider {...config}>\n          <RavePaymentButton>Pay 2000</RavePaymentButton>\n          {/* <RavePaymentButton text=\"Pay 2000\" /> */}\n        </RaveProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"styling-the-ravepaymentbutton\"\n    }}>{`Styling the RavePaymentButton`}</h2>\n    <p>{`The RavePaymentButton can be made just the way you wat by providing all `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` props or `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` props`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, {Component} from 'react';\nimport {RaveProvider, RavePaymentButton} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n  onSuccess: () => {},\n  onClose: () => {},\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <RaveProvider {...config}>\n          <RavePaymentButton className=\"custom-component\">Pay 2000</RavePaymentButton>\n        </RaveProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-custom-component\"\n    }}>{`Using custom component`}</h2>\n    <p>{`You can also use custom component or nested children to trigger the `}<inlineCode parentName=\"p\">{`rave-payment`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`initializePayment`}</inlineCode>{` function. This gives you the flexibility to use the `}<inlineCode parentName=\"p\">{`rave-payment`}</inlineCode>{` in more component with just one initialization.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, {Component} from 'react';\nimport {RaveProvider, RavePayment} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n\n};\n\nclass App extends Component {\n  handleSuccess() {\n    ...\n  }\n  handleResponse() {\n    ...\n  }\n  render() {\n    return (\n      <div>\n        <RavePayment {...config}>\n          {({initializePayment}) => <button onClick={() => initializePayment(this.handleSuccess, this.handleResponse)}>Pay 2000</button>}\n        </RavePayment>\n      </div>\n    );\n  }\n};\n\nexport default App;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}