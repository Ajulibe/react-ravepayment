{"version":3,"sources":["webpack:///../docs/usage/functional.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,oRAAmQ,0BAAYC,WAAW,KAAvB,gBAAnQ,4BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2lBA4BL,iBAAQ,CACN,GAAM,iCADR,iCAGA,gGAA+E,0BAAYA,WAAW,KAAvB,aAA/E,aAAkJ,0BAAYA,WAAW,KAAvB,SAAlJ,UACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yjBA2BL,iBAAQ,CACN,GAAM,0BADR,0BAGA,4FAA2E,0BAAYA,WAAW,KAAvB,gBAA3E,IAAwI,0BAAYA,WAAW,KAAvB,qBAAxI,wDAA8P,0BAAYA,WAAW,KAAvB,gBAA9P,oDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2nBAkCL,iBAAQ,CACN,GAAM,QADR,QAGA,2CAA0B,0BAAYA,WAAW,KAAvB,qBAA1B,mDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4DAIL,kJAAiI,0BAAYA,WAAW,KAAvB,SAAjI,SAA4L,0BAAYA,WAAW,KAAvB,WAA5L,yE,kMAKJJ,EAAWK,gBAAiB","file":"component---docs-usage-functional-mdx-b0e5dc333ca970201fcd.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/iamraphson/working-place/open-sources/rave-libs/react-ravepayment/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"functional-component\"\n    }}>{`Functional component`}</h2>\n    <p>{`ReactJs community has started with the adoption of usig functional component and I have to say it has been really great to have functional do what we want withoput having to worry much about react lifecycle. The example below shows how you can use the `}<inlineCode parentName=\"p\">{`rave-payment`}</inlineCode>{` in functional component`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {RaveProvider, RavePaymentButton} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n  onSuccess: () => {},\n  onClose: () => {},\n};\n\nconst App = () => {\n  return (\n    <div>\n      <RaveProvider {...config}>\n        <RavePaymentButton>Pay 2000</RavePaymentButton>\n        {/* <RavePaymentButton text=\"Pay 2000\" /> */}\n      </RaveProvider>\n    </div>\n  );\n};\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"styling-the-ravepaymentbutton\"\n    }}>{`Styling the RavePaymentButton`}</h2>\n    <p>{`The RavePaymentButton can be made just the way you wat by providing all `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` props or `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` props`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {RaveProvider, RavePaymentButton} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n  onSuccess: () => {},\n  onClose: () => {},\n};\n\nconst App = () => {\n  return (\n    <div>\n      <RaveProvider {...config}>\n        <RavePaymentButton text=\"Pay 2000\" className=\"custom-component\" />\n      </RaveProvider>\n    </div>\n  );\n};\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-custom-component\"\n    }}>{`Using custom component`}</h2>\n    <p>{`You can also use custom component or nested children to trigger the `}<inlineCode parentName=\"p\">{`rave-payment`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`initializePayment`}</inlineCode>{` function. This gives you the flexibility to use the `}<inlineCode parentName=\"p\">{`rave-payment`}</inlineCode>{` in more component with just one initialization.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {RaveProvider, RavePayment} from 'react-ravepayment';\n\nconst config = {\n  txref: 'rave-123456',\n  customer_email: 'user@example.com',\n  customer_phone: '234099940409',\n  amount: 2000,\n  PBFPubKey: 'FLWPUBK-XXXXXXXXXXXXXXXXXXXXXXXXXX-X',\n\n};\n\nconst App = () => {\n  function onClose() {\n    ...\n  }\n\n  function onSuccess() {\n    ...\n  }\n\n  return (\n    <div>\n      <RavePayment {...config}>\n        {({initializePayment}) => <button onClick={() => initializePayment(onSuccess, onClose)}>Pay 2000</button>}\n      </RavePayment>\n    </div>\n  );\n};\n\nexport default App;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"note\"\n    }}>{`NOTE`}</h3>\n    <p>{`You cannot use the `}<inlineCode parentName=\"p\">{`initializePayment`}</inlineCode>{` payment function in a your handler as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<button onClick={initializePayment}>Pay 2000</button>\n`}</code></pre>\n    <p>{`the function requires two parameters which are optinal however using it like above would be passing the default parameter `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` handler on a component and that would cause an unitented behaviour.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}