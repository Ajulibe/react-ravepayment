"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RavePayment = function (_Component) {
  _inherits(RavePayment, _Component);

  function RavePayment(props) {
    _classCallCheck(this, RavePayment);

    var _this = _possibleConstructorReturn(this, (RavePayment.__proto__ || Object.getPrototypeOf(RavePayment)).call(this, props));

    _this.payWithRave = _this.payWithRave.bind(_this);
    _this.loadScript = _this.loadScript.bind(_this);
    _this.state = {
      scriptLoaded: null,
      text: _this.props.text || "Make Payment",
      class: _this.props.class || "",
      currency: _this.props.currency || "NGN",
      country: _this.props.country || "NG"
    };
    return _this;
  }

  _createClass(RavePayment, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.setState({
        scriptLoaded: new Promise(function (resolve) {
          _this2.loadScript(function () {
            resolve();
          });
        })
      });
    }
  }, {
    key: "loadScript",
    value: function loadScript(callback) {
      var script = document.createElement("script");
      script.src = !this.props.isProduction ? "https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js" : "https://api.ravepay.co/flwv3-pug/getpaidx/api/flwpbf-inline.js";
      document.getElementsByTagName("head")[0].appendChild(script);
      if (script.readyState) {
        // IE
        script.onreadystatechange = function () {
          if (script.readyState === "loaded" || script.readyState === "complete") {
            script.onreadystatechange = null;
            callback();
          }
        };
      } else {
        // Others
        script.onload = function () {
          callback();
        };
      }
    }
  }, {
    key: "payWithRave",
    value: function payWithRave() {
      var _this3 = this;

      this.state.scriptLoaded && this.state.scriptLoaded.then(function () {
        window.getpaidSetup({
          customer_email: _this3.props.email,
          amount: _this3.props.amount,
          txref: _this3.props.reference,
          PBFPubKey: _this3.props.ravePubKey,
          onclose: function onclose() {
            return _this3.props.close();
          },
          callback: function callback(response) {
            return _this3.props.callback(response);
          },
          meta: _this3.props.metadata || [{}],
          currency: _this3.state.currency,
          country: _this3.state.country,
          customer_firstname: _this3.props.customer_firstname || "",
          customer_phone: _this3.props.customer_phone || "",
          customer_lastname: _this3.props.customer_lastname || "",
          custom_title: _this3.props.custom_title || "",
          custom_description: _this3.props.custom_description || "",
          custom_logo: tthis.props.custom_logo || "",
          subaccounts: _this3.props.subaccounts || [{}], //splits payments into subaccounts provided
          payment_method: _this3.props.payment_method || "both", //falls back to card and account if none is specified
          payment_plan: _this3.props.payment_plan || "", //the id of your payment plan
          redirect_url: _this3.props.redirect_url || "", //calls this url after successful payment
          hosted_payment: _this3.props.hosted_payment, //opens the modal in a new page
          campaign_id: _this3.props.campaign_id || "" //allows discounts
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var CustomTag = "" + this.props.tag;

      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          CustomTag,
          { className: this.state.class, onClick: this.payWithRave },
          this.state.text
        )
      );
    }
  }]);

  return RavePayment;
}(_react.Component);

RavePayment.defaultProps = {
  isProduction: false,
  tag: "button"
};

RavePayment.propTypes = {
  isProduction: _propTypes2.default.bool,
  text: _propTypes2.default.string,
  class: _propTypes2.default.string,
  metadata: _propTypes2.default.array,
  currency: _propTypes2.default.string,
  country: _propTypes2.default.string,
  customer_firstname: _propTypes2.default.string,
  customer_lastname: _propTypes2.default.string,
  customer_phone: _propTypes2.default.string,
  custom_title: _propTypes2.default.string,
  custom_description: _propTypes2.default.string,
  custom_logo: _propTypes2.default.string,
  reference: _propTypes2.default.string.isRequired,
  email: _propTypes2.default.string.isRequired,
  amount: _propTypes2.default.number.isRequired, //in Naira
  ravePubKey: _propTypes2.default.string.isRequired,
  callback: _propTypes2.default.func.isRequired,
  close: _propTypes2.default.func.isRequired,
  subaccounts: _propTypes2.default.array,
  payment_method: _propTypes2.default.string,
  payment_plan: _propTypes2.default.number,
  redirect_url: _propTypes2.default.string,
  hosted_payment: _propTypes2.default.number,
  campaign_id: _propTypes2.default.number,
  tag: _propTypes2.default.oneOf(["button", "a", "input"])
};

exports.default = RavePayment;

//# sourceMappingURL=RavePayment.min.js.map